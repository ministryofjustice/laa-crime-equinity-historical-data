plugins {
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
	id "io.sentry.jvm.gradle" version "4.10.0"
}
def versions = [
		springStarter 				: '3.3.3',
		springWeb 					: '6.1.13',
		springSecurity 				: '6.3.3',
		springdoc 					: '1.8.0',
		json 						: '20240303',
		logback 					: '1.5.6',
		mapStruct 					: '1.6.0.RC1',
		openAPI 					: '2.6.0',
		openCSV 					: '5.9',
		apacheCommons 				: '4.5.0-M2',
		junit 						: '5.11.0',
		xmlUnit 					: '2.10.0',
		h2db 						: '2.3.232',
		reactorTest 				: '3.6.10',
		sentry 						: '7.13.0',
		micrometerio 				: '1.1.3',
		prometheus 					: '1.12.6',
		tomcatEmbed 				: '10.1.25',
		nettyCodec 					: '4.1.108.Final',
]


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

    configureEach {
		resolutionStrategy {
			// List below contains dependencies included as part of a bundled package
			// with known vulnerabilities, and the version to use as a fix
			// This will still need to be included manually under the dependencies section
			// This will only ensure the override of the bundled version
			force "org.springframework:spring-webmvc:$versions.springWeb"
			force "org.springframework:spring-web:$versions.springWeb"
			force "org.springframework.boot:spring-boot-starter-web:$versions.springStarter"
			force "org.apache.tomcat.embed:tomcat-embed-core:$versions.tomcatEmbed"
			force "org.springframework:spring-webflux:$versions.springWeb"
			force "io.netty:netty-codec-http:$versions.nettyCodec"
//			force "org.springframework.boot:spring-boot-starter-webflux:$versions.springStarter"
			force "org.apache.commons:commons-collections4:$versions.apacheCommons"
			force "org.xmlunit:xmlunit-core:$versions.xmlUnit"
		}
	}
}


dependencyManagement {
	dependencies {
		dependencySet(group: 'io.sentry', version: versions.sentry) {
			entry 'sentry-spring-boot-starter'
			entry 'sentry-logback'
		}
	}
}

dependencies {
	implementation project(':data-api')

	// Spring
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:$versions.springStarter"
	implementation "org.springframework:spring-webmvc:$versions.springWeb"
	implementation "org.springframework:spring-web:$versions.springWeb"
	implementation "org.springframework.boot:spring-boot-starter-web:$versions.springStarter"
	implementation "org.apache.tomcat.embed:tomcat-embed-core:$versions.tomcatEmbed"


	// Logs
	implementation "ch.qos.logback:logback-core:$versions.logback"
	implementation "ch.qos.logback:logback-classic:$versions.logback"

	// Security (oAuth)
	implementation "org.springframework.security:spring-security-core:$versions.springSecurity"
	implementation "org.springframework.security:spring-security-web:$versions.springSecurity"
	implementation "org.springframework.security:spring-security-config:$versions.springSecurity"
	implementation "org.springframework.boot:spring-boot-starter-security:$versions.springStarter"

	implementation "org.springframework:spring-webflux:$versions.springWeb"
	implementation "io.netty:netty-codec-http:$versions.nettyCodec"

	implementation "org.springframework.boot:spring-boot-starter-actuator:$versions.springStarter"
	implementation "org.springframework.boot:spring-boot-starter-validation:$versions.springStarter"

	implementation "org.apache.commons:commons-collections4:$versions.apacheCommons"
	implementation "com.opencsv:opencsv:$versions.openCSV"

	// Sentry
	implementation platform("io.sentry:sentry-bom:$versions.sentry")
	implementation "io.sentry:sentry-logback:$versions.sentry"
	implementation "io.sentry:sentry-spring-boot-starter-jakarta:$versions.sentry"

	// Metrics
	implementation "io.micrometer:micrometer-tracing-bom:$versions.micrometerio"
	implementation "io.micrometer:micrometer-tracing-bridge-brave:$versions.micrometerio"
	implementation "io.micrometer:micrometer-registry-prometheus:$versions.prometheus"


	// Annotations
	//Enable Swagger UI
	implementation "org.springdoc:springdoc-openapi-ui:$versions.springdoc"
	implementation 'com.microsoft.sqlserver:mssql-jdbc'
	implementation "org.json:json:$versions.json"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation "org.mapstruct:mapstruct:$versions.mapStruct"
	annotationProcessor "org.mapstruct:mapstruct-processor:$versions.mapStruct"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$versions.springStarter"

	// If using JUnit Jupiter
	testImplementation("org.junit.jupiter:junit-jupiter:$versions.junit")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")

	testImplementation "org.xmlunit:xmlunit-core:$versions.xmlUnit"
	testImplementation "org.springframework.boot:spring-boot-starter-test:$versions.springStarter"
	testImplementation "io.projectreactor:reactor-test:$versions.reactorTest"
	testImplementation "com.h2database:h2:$versions.h2db"
}

jar {
	manifest {
		attributes(
			'Main-Class': 'uk.gov.justice.laa.crime.equinity.historicaldata.EquinityHistoricalDataApplication'
		)
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12" // 0.8.8
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/config/**',
					'**/exception/**',
					'**/mapper/**',
					'**/model/**',
					'**/repository/**',
					'**/security/**',
					'**/entity/**',
					'**/dto/**',
					'**/generated/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		failOnViolation = true

		rule {
			element = 'CLASS'
			excludes = [
				'uk.gov.justice.laa.crime.equinity.historicaldata.EquinityHistoricalDataApplication',
				'uk.gov.justice.laa.crime.equinity.historicaldata.config.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.exception.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.mapper.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.model.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.repository.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.security.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.generated.*',
				'uk.gov.justice.laa.crime.equinity.historicaldata.controller.CrmFileController' // This is a temporary test class
			]
			limit {
				minimum = 0.60
			}
		}
	}
}

sonar {
	properties {
		property "sonar.projectName", "laa-crime-equinity-historical-data"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "ministryofjustice"
		property "sonar.projectKey", "ministryofjustice_laa-crime-equinity-historical-data"

		property "sonar.exclusions", "**/mapper/**.java , **/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java,**/maatapi/**Client**.java,**/generated/**"
		property "sonar.coverage.exclusions", "**/EquinityHistoricalDataApplication.java"
		property "sonar.coverage.jacoco.xmlReportPaths",
				"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}
