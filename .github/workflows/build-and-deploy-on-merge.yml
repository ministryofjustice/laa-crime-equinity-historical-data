# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Build and Deploy after PR merged
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  JAVA_VERSION: 17
  JAVA_DIST: temurin

permissions:
  contents: read
  packages: read

jobs:
  capture-repo-info:
    uses: ./.github/workflows/_capture-repo-info.yml

  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
    needs:
      - capture-repo-info
    env:
      REPO_NAME: ${{ needs.capture-repo-info.outputs.repo_name }}

    steps:
      # Checkout github repo
      - uses: actions/checkout@v4

      - name: Build app jar with gradle
        uses: './.github/actions/build-app-gradle'
        with:
          java-version: ${{env.JAVA_VERSION}}
          java-dist: ${{env.JAVA_DIST}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Setup AWS ECR credentials
      - name: Setup AWS ECR credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      # Login to AWS ECR container repo
      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to AWS ECR container repo
        id: login-ecr
        with:
          mask-password: true

      # Build and push docker image to container repo
      - name: Build and push docker image
        uses: docker/build-push-action@v6
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.REPO_NAME }}-${{ github.sha }} # Tags ECR image with commit sha
        with:
          context: .
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          push: true

  test:
    runs-on: ubuntu-latest
    needs:
      - capture-repo-info

    steps:
      - uses: actions/checkout@v4

      - name: Run unit tests with gradle
        uses: './.github/actions/test-app-gradle'
        with:
          java-version: ${{env.JAVA_VERSION}}
          java-dist: ${{env.JAVA_DIST}}

  deploy-uat:
    permissions:
      id-token: write
      packages: write
    needs:
      - build
      - test
      - capture-repo-info
    uses: ./.github/workflows/_deploy-to.yml
    with:
      environment: "uat"
      repo_name: ${{ needs.capture-repo-info.outputs.repo_name }}
      app_name: ${{ needs.capture-repo-info.outputs.app_name }}
    secrets: inherit
