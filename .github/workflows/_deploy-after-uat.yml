# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Deploy after UAT

on:
  workflow_run:
    workflows: [ "Build and Deploy after PR merged" ]
    types:
      - completed

  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  capture-repo-info:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    uses: ./.github/workflows/_capture-repo-info.yml

  deploy-staging:
    permissions:
      contents: read
      packages: write
      id-token: write
    needs:
      - capture-repo-info
    runs-on: ubuntu-latest
    environment: "staging"

    steps:
      - run: |
          echo "Coming soon"
          echo "image_tag: [[ ${{ env.IMAGE_TAG }} ]]"
        env:
          IMAGE_TAG: ${{ needs.capture-repo-info.outputs.repo_name }}-${{ github.sha }} # Tags ECR image with commit sha

  deploy-prod:
    permissions:
      contents: read
      packages: write
      id-token: write
    needs:
      - deploy-staging
      - capture-repo-info
    uses: ./.github/workflows/_deploy-to.yml
    with:
      environment: "prod"
      repo_name: ${{ needs.capture-repo-info.outputs.repo_name }}
      app_name: ${{ needs.capture-repo-info.outputs.app_name }}
    secrets: inherit

  snyk-monitor:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    needs:
      - deploy-prod
      - capture-repo-info

    steps:
      - uses: actions/checkout@v4

      - name: Setup Snyk Monitor checks for Java app vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true # To make sure that further actions are called (e.g. SARIF upload)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: |
            --all-sub-projects
            --severity-threshold=high

      # Setup AWS ECR credentials
      - name: Setup AWS ECR credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      # Login to AWS ECR container repo
      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to AWS ECR container repo
        id: login-ecr
        with:
          mask-password: true

      - name: Setup Snyk Monitor checks for Docker image vulnerabilities
        uses: snyk/actions/docker@8349f9043a8b7f0f3ee8885bf28f0b388d2446e8
        continue-on-error: true # To make sure that further actions are called (e.g. monitor or SARIF upload)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.capture-repo-info.outputs.repo_name }}-${{ github.sha }} # Tags ECR image with commit sha
        with:
          command: monitor
          image: ${{ env.REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high
